{1:F01BKCHCNBJ49C00000000000}{2:I103DBSSTWTPIBDXN}{4: \
:20:D0EQLHLNQC \
:23B:CRED \
:32A:180619EUR4193, \
:50K:/LCMO8FT89MQH2AC \
Aerospace Industries Organization \
No. 2 Jalan 1/27 Off, 58200 Jalan Kuchai Lama \
MALAYSIA \
:59:/V5EI6V57LRA4SBR \
REZA-GHOLI ESMAELI \
No. 151, Lane 439, Section 4, Zhangshui Road \
TAIWAN \
:71A:SHA \
-}


def clean_beneficiary(x):
    return re.sub('[\n]+',' ',re.sub('/[X]*[\n]*','',x))


/XXXXXXXXXXX



ALLIANZ WORLDWIDE CARE SA DUBLIN



ALLIANZ WORLDWIDE CARE SA DUBLI 15



JOYCE WAY PARKWEST BUSINESS PARK NA



NGOR ROAD DUBLIN 12





string = """/XXXXXXXXXXX 



ALLIANZ WORLDWIDE CARE SA DUBLIN



ALLIANZ WORLDWIDE CARE SA DUBLI 15



JOYCE WAY PARKWEST BUSINESS PARK NA



NGOR ROAD DUBLIN 12"""


cities = ["DUBLIN", "Pune"]

raw = string.split()
print(set(raw).intersection(set(cities)))


import pickle
def writePickle(var, filename):
    with open(filename, 'wb') as f:  # Python 3: open(..., 'wb')
        pickle.dump(var, f)
        return
 
def readPickle(filename):
    with open(filename, 'rb') as f:  # Python 3: open(..., 'rb')
        return pickle.load(f)
        
        
        
 
def mat(st,ma):
    raw = st.split()
    ya=set(raw).intersection(set(ma))
    if(bool(ya)):
        geolocator = Nominatim()
        location = geolocator.geocode(ya)
        tup=(location.latitude,location.longitude)
        print(location)
        print(location.latitude)
        print(location.longitude)
        return tup,ya
    ya='Singapore'
    geolocator = Nominatim()
    location = geolocator.geocode(ya)
    tup=(location.latitude,location.longitude)
    print(location)
    print(location.latitude)
    print(location.longitude)
    return tup,ya



def updateLatLong(df):
    df=df[['ordering_customer','beneficiary']]
    df=df.astype('str')
    fromCity,fromTuple = mat(row['ordering_customer'],master)
    toCity,toTuple=mat(row['beneficiary'],master)
    return fromCity, toCity, fromTuple, toTuple

plotGeoPlot(m,fromCity, toCity, fromTuple, toTuple)
    
